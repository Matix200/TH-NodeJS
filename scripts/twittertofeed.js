//for this to run you have to define environment variables
	//twOauthToken and twOauthTokenSecret
	//how to get them...
		//use Happy Friends and authenticate, http://happyfriends.camp/
		//open the browser console, and get the values of...
		//localStorage.twOauthToken  and localStorage.twOauthTokenSecret
	//then in your Unix command prompt
		//export twOauthToken=xxx
		//export twOauthTokenSecret=yyy

var urlServer = "http://twitter.happyfriends.camp/"; 
var twOauthToken = process.env.twOauthToken, twOauthTokenSecret = process.env.twOauthTokenSecret;
var twUserId = "3839";
var flSkipReplies = true;

var rssHeadElements, rssHistory = new Array ();

function twTwitterDateToGMT (twitterDate) { //7/16/14 by DW
	return (new Date (twitterDate).toGMTString ());
	}
function filledString (ch, ct) { //6/4/14 by DW
	var s = "";
	for (var i = 0; i < ct; i++) {
		s += ch;
		}
	return (s);
	}
function encodeXml (s) { //7/15/14 by DW
	if (s === undefined) {
		return ("");
		}
	else {
		var charMap = {
			'<': '&lt;',
			'>': '&gt;',
			'&': '&amp;',
			'"': '&'+'quot;'
			};
		s = s.toString();
		s = s.replace(/\u00A0/g, " ");
		var escaped = s.replace(/[<>&"]/g, function(ch) {
			return charMap [ch];
			});
		return escaped;
		}
	}
function trimWhitespace (s) { //rewrite -- 5/30/14 by DW
	function isWhite (ch) {
		switch (ch) {
			case " ": case "\r": case "\n": case "\t":
				return (true);
			}
		return (false);
		}
	if (s === undefined) { //9/10/14 by DW
		return ("");
		}
	while (isWhite (s.charAt (0))) {
		s = s.substr (1);
		}
	while (s.length > 0) {
		if (!isWhite (s.charAt (0))) {
			break;
			}
		s = s.substr (1);
		}
	while (s.length > 0) {
		if (!isWhite (s.charAt (s.length - 1))) {
			break;
			}
		s = s.substr (0, s.length - 1);
		}
	return (s);
	}

function buildRssFeed (headElements, historyArray) {
	function encode (s) {
		if (s === undefined) {
			return ("");
			}
		var lines = encodeXml (s).split (String.fromCharCode (10));
		var returnedstring = "";
		for (var i = 0; i < lines.length; i++) {
			returnedstring += trimWhitespace (lines [i]);
			if (i < (lines.length - 1)) {
				returnedstring += "&#10;";
				}
			}
		return (returnedstring);
		}
	function whenMostRecentTweet () {
		if (historyArray.length > 0) {
			return (new Date (historyArray [0].when));
			}
		else {
			return (new Date (0));
			}
		}
	function buildOutlineXml (theOutline) {
		function addOutline (outline) {
			var s = "<source:outline";
			function hasSubs (outline) {
				return (outline.subs != undefined) && (outline.subs.length > 0);
				}
			function addAtt (name) {
				if (outline [name] != undefined) {
					s += " " + name + "=\"" + encode (outline [name]) + "\" ";
					}
				}
			addAtt ("text");
			addAtt ("type");
			addAtt ("created");
			addAtt ("name");
			
			if (hasSubs (outline)) {
				add (s + ">");
				indentlevel++;
				for (var i = 0; i < outline.subs.length; i++) {
					addOutline (outline.subs [i]);
					}
				add ("</source:outline>");
				indentlevel--;
				}
			else {
				add (s + "/>");
				}
			
			}
		addOutline (theOutline);
		return (xmltext);
		}
	var xmltext = "", indentlevel = 0, starttime = new Date (); nowstring = starttime.toGMTString ();
	var username = headElements.twitterScreenName, maxitems = headElements.maxFeedItems;
	function add (s) {
		xmltext += filledString ("\t", indentlevel) + s + "\n";
		}
	function addAccount (servicename, username) {
		if ((username != undefined) && (username.length > 0)) { 
			add ("<source:account service=\"" + encode (servicename) + "\">" + encode (username) + "</source:account>");
			}
		}
	add ("<?xml version=\"1.0\"?>")
	add ("<!-- RSS generated by noderunner.js on " + nowstring + " -->")
	add ("<rss version=\"2.0\" xmlns:source=\"http://source.smallpict.com/2014/07/12/theSourceNamespace.html\">"); indentlevel++
	add ("<channel>"); indentlevel++;
	//add header elements
		add ("<title>" + encode (headElements.title) + "</title>");
		add ("<link>" + encode (headElements.link) + "</link>");
		add ("<description>" + encode (headElements.description) + "</description>");
		add ("<pubDate>" + whenMostRecentTweet ().toUTCString () + "</pubDate>"); 
		add ("<lastBuildDate>" + nowstring + "</lastBuildDate>");
		add ("<language>" + encode (headElements.language) + "</language>");
		add ("<generator>" + headElements.generator + "</generator>");
		add ("<docs>" + headElements.docs + "</docs>");
		addAccount ("twitter", username); 
	//add items
		var ctitems = 0;
		for (var i = 0; (i < historyArray.length) && (ctitems < maxitems); i++) {
			var item = historyArray [i], itemcreated = twTwitterDateToGMT (item.when), itemtext = encode (item.text);
			var linktotweet = encode ("https://twitter.com/" + username + "/status/" + item.idTweet);
			add ("<item>"); indentlevel++;
			add ("<description>" + itemtext + "</description>"); 
			add ("<pubDate>" + itemcreated + "</pubDate>"); 
			//link -- 8/12/14 by DW
				if (item.link != undefined) {
					add ("<link>" + encode (item.link) + "</link>"); 
					}
				else {
					add ("<link>" + linktotweet + "</link>"); 
					}
			//source:linkShort -- 8/26/14 by DW
				if (item.linkShort != undefined) {
					add ("<source:linkShort>" + encode (item.linkShort) + "</source:linkShort>"); 
					}
			//guid -- 8/12/14 by DW
				if (item.guid != undefined) {
					if (utils.getBoolean (item.guid.flPermalink)) {
						add ("<guid>" + encode (item.guid.value) + "</guid>"); 
						}
					else {
						add ("<guid isPermaLink=\"false\">" + encode (item.guid.value) + "</guid>"); 
						}
					}
				else {
					add ("<guid>" + linktotweet + "</guid>"); 
					}
			//enclosure -- 8/11/14 by DW
				if (item.enclosure != undefined) {
					var enc = item.enclosure;
					if ((enc.url != undefined) && (enc.type != undefined) && (enc.length != undefined)) {
						add ("<enclosure url=\"" + enc.url + "\" type=\"" + enc.type + "\" length=\"" + enc.length + "\"/>");
						}
					}
			//source:outline
				if (item.outline != undefined) { //10/15/14 by DW
					buildOutlineXml (item.outline);
					}
				else {
					if (item.idTweet != undefined) {
						add ("<source:outline text=\"" + itemtext + "\" created=\"" + itemcreated + "\" type=\"tweet\" tweetId=\"" + item.idTweet + "\" tweetUserName=\"" + encode (item.twitterScreenName) + "\"/>");
						}
					if (item.enclosure != undefined) { //9/23/14 by DW
						var enc = item.enclosure;
						if (enc.type != undefined) { //10/25/14 by DW
							if (utils.beginsWith (enc.type.toLowerCase (), "image")) {
								add ("<source:outline text=\"" + itemtext + "\" created=\"" + itemcreated + "\" type=\"image\" url=\"" + enc.url + "\"/>");
								}
							}
						}
					}
			add ("</item>"); indentlevel--;
			ctitems++;
			}
	add ("</channel>"); indentlevel--;
	add ("</rss>"); indentlevel--;
	return (xmltext);
	}
function addFeedItem (t) {
	var username = t.user.screen_name;
	var userbaseurl = "http://twitter.com/" + username;
	rssHeadElements = {
		title: username + "'s RSS Feed",
		link: userbaseurl,
		description: "A feed generated from " + username + "'s tweets by noderunner.js",
		language: "en-us",
		generator: "noderunner.js",
		docs: "http://cyber.law.harvard.edu/rss/rss.html",
		twitterScreenName: username,
		maxFeedItems: 25
		};
	//try to split the tweet text into text and a link
		var s = t.text, link = undefined;
		for (var i = s.length - 1; i >= 0; i--) {
			if (s [i] == " ") {
				var x = s.substr (i + 1);
				if (utils.beginsWith (x, "http://")) {
					s = s.substr (0, i);
					link = x;
					}
				break;
				}
			}
	rssHistory [rssHistory.length] = {
		when: new Date (t.created_at),
		text: s,
		idTweet: t.id_str,
		link: link,
		guid: {
			flPermalink: true,
			value: userbaseurl + "status/" + t.id_str
			}
		};
	}
function twGetMyTweets (userid, callback, idLastSeen) {
	var sinceParam = "";
	function encode (s) {
		return (encodeURIComponent (s));
		}
	if (idLastSeen != undefined) {
		sinceParam = "&since_id=" + idLastSeen;
		}
	var apiUrl = urlServer + "getmytweets" + "?oauth_token=" + encode (twOauthToken) + "&oauth_token_secret=" + encode (twOauthTokenSecret) + "&user_id=" + encode (userid) + sinceParam;
	console.log (apiUrl);
	httpReadUrl (apiUrl, function (s) {
		callback (JSON.parse (s));
		});
	}
console.log ("twitterToFeed.js v2");
twGetMyTweets (twUserId, function (theTweets) {
	
	
	
	for (var i = 0; i < theTweets.length; i++) {
		var thisTweet = theTweets [i], s = thisTweet.text, flInclude = true;
		if (flSkipReplies) {
			if (thisTweet.in_reply_to_status_id != null) { //it's a reply
				flInclude = false;
				}
			}
		if (flInclude) {
			addFeedItem (thisTweet);
			}
		}
	
	
	var xmltext = buildRssFeed (rssHeadElements, rssHistory);
	
	
	console.log ("writing " + xmltext.length + " chars to davetwitterfeed.xml");
	
	fs.writeFile ("../pagepark/domains/lucky.wtf/davetwitterfeed.xml", xmltext, function (err) {
		});
	});
